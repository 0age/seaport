{
  "address": "0x345cA3e014Aaf5dcA488057592ee47305D9B3e10",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xbaf50d7bff240bf2e1390e677afa49c5094936076cdab39d59ad86e182152fc4",
  "receipt": {
    "to": null,
    "from": "0x627306090abaB3A6e1400e9345bC60c78a8BEf57",
    "contractAddress": "0x345cA3e014Aaf5dcA488057592ee47305D9B3e10",
    "transactionIndex": 0,
    "gasUsed": "805371",
    "logsBloom": "0x
    "blockHash": "0x158974529f5b6cd26af26051f8def49041577a36a5e20dfe8209d2c230c53c92",
    "transactionHash": "0xbaf50d7bff240bf2e1390e677afa49c5094936076cdab39d59ad86e182152fc4",
    "logs": [],
    "blockNumber": 3,
    "cumulativeGasUsed": "805371",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ccc4e07d484517a8c380a55b06c0e1e8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/TestERC1155.sol\":\"TestERC1155\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@rari-capital/solmate/src/tokens/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Minimalist and gas efficient standard ERC1155 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC1155.sol)\\nabstract contract ERC1155 {\\n    /*///////////////////////////////////////////////////////////////\\n                                EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 amount\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] amounts\\n    );\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    event URI(string value, uint256 indexed id);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            ERC1155 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(address => mapping(uint256 => uint256)) public balanceOf;\\n\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function uri(uint256 id) public view virtual returns (string memory);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             ERC1155 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual {\\n        require(msg.sender == from || isApprovedForAll[from][msg.sender], \\\"NOT_AUTHORIZED\\\");\\n\\n        balanceOf[from][id] -= amount;\\n        balanceOf[to][id] += amount;\\n\\n        emit TransferSingle(msg.sender, from, to, id, amount);\\n\\n        require(\\n            to.code.length == 0\\n                ? to != address(0)\\n                : ERC1155TokenReceiver(to).onERC1155Received(msg.sender, from, id, amount, data) ==\\n                    ERC1155TokenReceiver.onERC1155Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual {\\n        uint256 idsLength = ids.length; // Saves MLOADs.\\n\\n        require(idsLength == amounts.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        require(msg.sender == from || isApprovedForAll[from][msg.sender], \\\"NOT_AUTHORIZED\\\");\\n\\n        for (uint256 i = 0; i < idsLength; ) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            balanceOf[from][id] -= amount;\\n            balanceOf[to][id] += amount;\\n\\n            // An array can't have a total length\\n            // larger than the max uint256 value.\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, from, to, ids, amounts);\\n\\n        require(\\n            to.code.length == 0\\n                ? to != address(0)\\n                : ERC1155TokenReceiver(to).onERC1155BatchReceived(msg.sender, from, ids, amounts, data) ==\\n                    ERC1155TokenReceiver.onERC1155BatchReceived.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function balanceOfBatch(address[] memory owners, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        returns (uint256[] memory balances)\\n    {\\n        uint256 ownersLength = owners.length; // Saves MLOADs.\\n\\n        require(ownersLength == ids.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        balances = new uint256[](owners.length);\\n\\n        // Unchecked because the only math done is incrementing\\n        // the array index counter which cannot possibly overflow.\\n        unchecked {\\n            for (uint256 i = 0; i < ownersLength; i++) {\\n                balances[i] = balanceOf[owners[i]][ids[i]];\\n            }\\n        }\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function supportsInterface(bytes4 interfaceId) public pure virtual returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0xd9b67a26 || // ERC165 Interface ID for ERC1155\\n            interfaceId == 0x0e89341c; // ERC165 Interface ID for ERC1155MetadataURI\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal {\\n        balanceOf[to][id] += amount;\\n\\n        emit TransferSingle(msg.sender, address(0), to, id, amount);\\n\\n        require(\\n            to.code.length == 0\\n                ? to != address(0)\\n                : ERC1155TokenReceiver(to).onERC1155Received(msg.sender, address(0), id, amount, data) ==\\n                    ERC1155TokenReceiver.onERC1155Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _batchMint(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal {\\n        uint256 idsLength = ids.length; // Saves MLOADs.\\n\\n        require(idsLength == amounts.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        for (uint256 i = 0; i < idsLength; ) {\\n            balanceOf[to][ids[i]] += amounts[i];\\n\\n            // An array can't have a total length\\n            // larger than the max uint256 value.\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, address(0), to, ids, amounts);\\n\\n        require(\\n            to.code.length == 0\\n                ? to != address(0)\\n                : ERC1155TokenReceiver(to).onERC1155BatchReceived(msg.sender, address(0), ids, amounts, data) ==\\n                    ERC1155TokenReceiver.onERC1155BatchReceived.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _batchBurn(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal {\\n        uint256 idsLength = ids.length; // Saves MLOADs.\\n\\n        require(idsLength == amounts.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        for (uint256 i = 0; i < idsLength; ) {\\n            balanceOf[from][ids[i]] -= amounts[i];\\n\\n            // An array can't have a total length\\n            // larger than the max uint256 value.\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, from, address(0), ids, amounts);\\n    }\\n\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal {\\n        balanceOf[from][id] -= amount;\\n\\n        emit TransferSingle(msg.sender, from, address(0), id, amount);\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which properly accepts ERC1155 tokens.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC1155.sol)\\ninterface ERC1155TokenReceiver {\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd361476aafb22c810c82668395d38506e297d6e1fdc246eaa4ba947d19ba740c\",\"license\":\"AGPL-3.0-only\"},\"contracts/test/TestERC1155.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.13;\\n\\nimport \\\"@rari-capital/solmate/src/tokens/ERC1155.sol\\\";\\n\\n// Used for minting test ERC1155s in our tests\\ncontract TestERC1155 is ERC1155 {\\n    function mint(\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) public returns (bool) {\\n        _mint(to, tokenId, amount, \\\"\\\");\\n        return true;\\n    }\\n\\n    function uri(uint256) public pure override returns (string memory) {\\n        return \\\"uri\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x352e83cafa5d2bf7a41acae8f50163501bdc6657d5fc466b621cd36ec759275e\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657610d9a908161001c8239f35b600080fdfe608080604052600436101561001357600080fd5b6000803560e01c918262fdd58e146100d1575050806301ffc9a7146100c85780630e89341c146100bf578063156e29f6146100b65780632eb2c2d6146100ad5780634e1273f4146100a4578063a22cb4651461009b578063e985e9c5146100925763f242432a14610085575b38600080fd5b61008d610921565b61007f565b5061008d6108c3565b5061008d610834565b5061008d610779565b5061008d610536565b5061008d610291565b5061008d610229565b5061008d610169565b3461010e57604036600319011261010e576020916040906001600160a01b036100f8610112565b1681528084528181206024358252845220548152f35b5080fd5b600435906001600160a01b038216820361012857565b600080fd5b602435906001600160a01b038216820361012857565b35906001600160a01b038216820361012857565b6001600160e01b031981160361012857565b503461012857602036600319011261012857602060043561018981610157565b63ffffffff60e01b166301ffc9a760e01b81149081156101c7575b81156101b6575b506040519015158152f35b6303a24d0760e21b149050386101ab565b636cdb3d1360e11b811491506101a4565b91908251928382526000905b848210610211575092806020939411610204575b601f01601f1916010190565b60008382840101526101f8565b906020908180828501015190828601015201906101e4565b5034610128576020366003190112610128576102806040516040810181811067ffffffffffffffff821117610284575b604052600381526275726960e81b60208201526040519182916020835260208301906101d8565b0390f35b61028c6103ea565b610259565b5034610128576060366003190112610128576103566102ae610112565b6024356044356040516102c081610401565b60008082526001600160a01b03851681526020819052604090206102f09084905b90600052602052604060002090565b6102fb838254610b0a565b905560408051848152602081018490526001600160a01b0386169591869160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629190a4600092903b61036257505050501515610ba8565b60405160018152602090f35b9082939460209261038c9460405180968195829463f23a6e6160e01b9b8c85523360048601610b37565b03925af19182156103dd575b916103af575b506001600160e01b03191614610ba8565b6103d0915060203d81116103d6575b6103c8818361042a565b810190610b22565b3861039e565b503d6103be565b6103e5610b9b565b610398565b50634e487b7160e01b600052604160045260246000fd5b6020810190811067ffffffffffffffff82111761041d57604052565b6104256103ea565b604052565b90601f8019910116810190811067ffffffffffffffff82111761041d57604052565b60209067ffffffffffffffff8111610466575b60051b0190565b61046e6103ea565b61045f565b81601f820112156101285780359161048a8361044c565b92610498604051948561042a565b808452602092838086019260051b820101928311610128578301905b8282106104c2575050505090565b813581529083019083016104b4565b81601f820112156101285780359067ffffffffffffffff8211610529575b60405192610507601f8401601f19166020018561042a565b8284526020838301011161012857816000926020809301838601378301015290565b6105316103ea565b6104ef565b50346101285760a036600319011261012857610550610112565b61055861012d565b9067ffffffffffffffff906044358281116101285761057b903690600401610473565b60643583811161012857610593903690600401610473565b92608435908111610128576105ac9036906004016104d1565b8151936105bb81518614610be7565b6001600160a01b038481169533871480156106e5575b6105da90610a9f565b60005b8181106106675750509561063996811680966040517f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb339180610621888b83610c4f565b0390a4600093903b61063b5750505050501515610ba8565b005b94602092918461038c9596976040519687958694859363bc197c8160e01b9c8d86523360048701610c74565b80876106dd6106d5836102e18e6106ae8b6102e18f61068b60019c61069492610c25565b51968793610c25565b519860018060a01b03166000526000602052604060002090565b6106b9878254610af3565b90556001600160a01b0316600090815260208190526040902090565b918254610b0a565b9055016105dd565b506105da61072a6107233361070c8a60018060a01b03166000526001602052604060002090565b9060018060a01b0316600052602052604060002090565b5460ff1690565b90506105d1565b90815180825260208080930193019160005b828110610751575050505090565b835185529381019392810192600101610743565b906020610776928181520190610731565b90565b50346101285760403660031901126101285760043567ffffffffffffffff80821161012857366023830112156101285781600401356107b78161044c565b926107c5604051948561042a565b81845260209160248386019160051b8301019136831161012857602401905b82821061081d5785602435868111610128576102809161080b610811923690600401610473565b90610cc2565b60405191829182610765565b83809161082984610143565b8152019101906107e4565b50346101285760403660031901126101285761084e610112565b60243590811515809203610128573360009081526001602090815260408083206001600160a01b0385168452909152902060ff1981541660ff841617905560405191825260018060a01b0316907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a3005b503461012857604036600319011261012857602060ff6109156108e4610112565b6108ec61012d565b6001600160a01b0391821660009081526001865260408082209290931681526020919091522090565b54166040519015158152f35b50346101285760a03660031901126101285761093b610112565b61094361012d565b6084359160443560643567ffffffffffffffff85116101285761096d6106399536906004016104d1565b6001600160a01b0384811695919291903387148015610a71575b61099090610a9f565b6109b0856102e18860018060a01b03166000526000602052604060002090565b6109bb848254610af3565b90556109dd856102e18460018060a01b03166000526000602052604060002090565b6109e8848254610b0a565b9055811680966040517fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62339180610a2d888b8360209093929193604081019481520152565b0390a4600093903b610a455750505050501515610ba8565b94602092918461038c9596976040519687958694859363f23a6e6160e01b9c8d86523360048701610b68565b50610990610a986107233361070c8a60018060a01b03166000526001602052604060002090565b9050610987565b15610aa657565b60405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b6044820152606490fd5b50634e487b7160e01b600052601160045260246000fd5b818110610afe570390565b610b06610adc565b0390565b81198111610b16570190565b610b1e610adc565b0190565b90816020910312610128575161077681610157565b909260a0926107769594600180861b03168352600060208401526040830152606082015281608082015201906101d8565b919261077695949160a094600180871b0380921685521660208401526040830152606082015281608082015201906101d8565b506040513d6000823e3d90fd5b15610baf57565b60405162461bcd60e51b815260206004820152601060248201526f155394d0519157d49150d2541251539560821b6044820152606490fd5b15610bee57565b60405162461bcd60e51b815260206004820152600f60248201526e0988a9c8ea890be9a92a69a82a8869608b1b6044820152606490fd5b8051821015610c395760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b9091610c6661077693604084526040840190610731565b916020818403910152610731565b93906107769593610ca691610cb49460018060a01b03809216885216602087015260a0604087015260a0860190610731565b908482036060860152610731565b9160808184039101526101d8565b918251610cd183518214610be7565b8351610cdc8161044c565b90604090610cec8251938461042a565b808352610cfb601f199161044c565b01946020953687850137829560005b858110610d1c57505050505050909150565b6001906001600160a01b03610d31828c610c25565b51166000526000835284600020610d488286610c25565b5160005283528460002054610d5d8288610c25565b5201610d0a56fea2646970667358221220a76b16088a4c00d6121d49139dec9dec3c92cacef25d4afe8527a68ddeb57e6064736f6c634300080d0033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b6000803560e01c918262fdd58e146100d1575050806301ffc9a7146100c85780630e89341c146100bf578063156e29f6146100b65780632eb2c2d6146100ad5780634e1273f4146100a4578063a22cb4651461009b578063e985e9c5146100925763f242432a14610085575b38600080fd5b61008d610921565b61007f565b5061008d6108c3565b5061008d610834565b5061008d610779565b5061008d610536565b5061008d610291565b5061008d610229565b5061008d610169565b3461010e57604036600319011261010e576020916040906001600160a01b036100f8610112565b1681528084528181206024358252845220548152f35b5080fd5b600435906001600160a01b038216820361012857565b600080fd5b602435906001600160a01b038216820361012857565b35906001600160a01b038216820361012857565b6001600160e01b031981160361012857565b503461012857602036600319011261012857602060043561018981610157565b63ffffffff60e01b166301ffc9a760e01b81149081156101c7575b81156101b6575b506040519015158152f35b6303a24d0760e21b149050386101ab565b636cdb3d1360e11b811491506101a4565b91908251928382526000905b848210610211575092806020939411610204575b601f01601f1916010190565b60008382840101526101f8565b906020908180828501015190828601015201906101e4565b5034610128576020366003190112610128576102806040516040810181811067ffffffffffffffff821117610284575b604052600381526275726960e81b60208201526040519182916020835260208301906101d8565b0390f35b61028c6103ea565b610259565b5034610128576060366003190112610128576103566102ae610112565b6024356044356040516102c081610401565b60008082526001600160a01b03851681526020819052604090206102f09084905b90600052602052604060002090565b6102fb838254610b0a565b905560408051848152602081018490526001600160a01b0386169591869160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629190a4600092903b61036257505050501515610ba8565b60405160018152602090f35b9082939460209261038c9460405180968195829463f23a6e6160e01b9b8c85523360048601610b37565b03925af19182156103dd575b916103af575b506001600160e01b03191614610ba8565b6103d0915060203d81116103d6575b6103c8818361042a565b810190610b22565b3861039e565b503d6103be565b6103e5610b9b565b610398565b50634e487b7160e01b600052604160045260246000fd5b6020810190811067ffffffffffffffff82111761041d57604052565b6104256103ea565b604052565b90601f8019910116810190811067ffffffffffffffff82111761041d57604052565b60209067ffffffffffffffff8111610466575b60051b0190565b61046e6103ea565b61045f565b81601f820112156101285780359161048a8361044c565b92610498604051948561042a565b808452602092838086019260051b820101928311610128578301905b8282106104c2575050505090565b813581529083019083016104b4565b81601f820112156101285780359067ffffffffffffffff8211610529575b60405192610507601f8401601f19166020018561042a565b8284526020838301011161012857816000926020809301838601378301015290565b6105316103ea565b6104ef565b50346101285760a036600319011261012857610550610112565b61055861012d565b9067ffffffffffffffff906044358281116101285761057b903690600401610473565b60643583811161012857610593903690600401610473565b92608435908111610128576105ac9036906004016104d1565b8151936105bb81518614610be7565b6001600160a01b038481169533871480156106e5575b6105da90610a9f565b60005b8181106106675750509561063996811680966040517f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb339180610621888b83610c4f565b0390a4600093903b61063b5750505050501515610ba8565b005b94602092918461038c9596976040519687958694859363bc197c8160e01b9c8d86523360048701610c74565b80876106dd6106d5836102e18e6106ae8b6102e18f61068b60019c61069492610c25565b51968793610c25565b519860018060a01b03166000526000602052604060002090565b6106b9878254610af3565b90556001600160a01b0316600090815260208190526040902090565b918254610b0a565b9055016105dd565b506105da61072a6107233361070c8a60018060a01b03166000526001602052604060002090565b9060018060a01b0316600052602052604060002090565b5460ff1690565b90506105d1565b90815180825260208080930193019160005b828110610751575050505090565b835185529381019392810192600101610743565b906020610776928181520190610731565b90565b50346101285760403660031901126101285760043567ffffffffffffffff80821161012857366023830112156101285781600401356107b78161044c565b926107c5604051948561042a565b81845260209160248386019160051b8301019136831161012857602401905b82821061081d5785602435868111610128576102809161080b610811923690600401610473565b90610cc2565b60405191829182610765565b83809161082984610143565b8152019101906107e4565b50346101285760403660031901126101285761084e610112565b60243590811515809203610128573360009081526001602090815260408083206001600160a01b0385168452909152902060ff1981541660ff841617905560405191825260018060a01b0316907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a3005b503461012857604036600319011261012857602060ff6109156108e4610112565b6108ec61012d565b6001600160a01b0391821660009081526001865260408082209290931681526020919091522090565b54166040519015158152f35b50346101285760a03660031901126101285761093b610112565b61094361012d565b6084359160443560643567ffffffffffffffff85116101285761096d6106399536906004016104d1565b6001600160a01b0384811695919291903387148015610a71575b61099090610a9f565b6109b0856102e18860018060a01b03166000526000602052604060002090565b6109bb848254610af3565b90556109dd856102e18460018060a01b03166000526000602052604060002090565b6109e8848254610b0a565b9055811680966040517fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62339180610a2d888b8360209093929193604081019481520152565b0390a4600093903b610a455750505050501515610ba8565b94602092918461038c9596976040519687958694859363f23a6e6160e01b9c8d86523360048701610b68565b50610990610a986107233361070c8a60018060a01b03166000526001602052604060002090565b9050610987565b15610aa657565b60405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b6044820152606490fd5b50634e487b7160e01b600052601160045260246000fd5b818110610afe570390565b610b06610adc565b0390565b81198111610b16570190565b610b1e610adc565b0190565b90816020910312610128575161077681610157565b909260a0926107769594600180861b03168352600060208401526040830152606082015281608082015201906101d8565b919261077695949160a094600180871b0380921685521660208401526040830152606082015281608082015201906101d8565b506040513d6000823e3d90fd5b15610baf57565b60405162461bcd60e51b815260206004820152601060248201526f155394d0519157d49150d2541251539560821b6044820152606490fd5b15610bee57565b60405162461bcd60e51b815260206004820152600f60248201526e0988a9c8ea890be9a92a69a82a8869608b1b6044820152606490fd5b8051821015610c395760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b9091610c6661077693604084526040840190610731565b916020818403910152610731565b93906107769593610ca691610cb49460018060a01b03809216885216602087015260a0604087015260a0860190610731565b908482036060860152610731565b9160808184039101526101d8565b918251610cd183518214610be7565b8351610cdc8161044c565b90604090610cec8251938461042a565b808352610cfb601f199161044c565b01946020953687850137829560005b858110610d1c57505050505050909150565b6001906001600160a01b03610d31828c610c25565b51166000526000835284600020610d488286610c25565b5160005283528460002054610d5d8288610c25565b5201610d0a56fea2646970667358221220a76b16088a4c00d6121d49139dec9dec3c92cacef25d4afe8527a68ddeb57e6064736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 48,
        "contract": "contracts/test/TestERC1155.sol:TestERC1155",
        "label": "balanceOf",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 54,
        "contract": "contracts/test/TestERC1155.sol:TestERC1155",
        "label": "isApprovedForAll",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}