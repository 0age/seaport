// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import "seaport-sol/SeaportSol.sol";

import {
    MOATOrder,
    MOATOrderContext,
    MOATHelpers,
    Structure,
    Family
} from "./MOATHelpers.sol";
import { BaseOrderTest } from "../BaseOrderTest.sol";

struct FuzzParams {
    uint256 seed;
}

struct TestContext {
    /**
     * @dev An array of MOATOrders. MOAT orders are a wrapper struct around
     *      AdvancedOrder that includes an additional MOATOrderContext. This
     *      extra context includes any additional args we might need to provide
     *      with the order.
     */
    MOATOrder[] orders;
    /**
     * @dev A Seaport interface, either the reference or optimized version.
     */
    SeaportInterface seaport;
    /**
     * @dev A caller address. If this is nonzero, the MOATEngine will prank this
     *      address before calling exec.
     */
    address caller;
    /**
     * @dev A struct containing fuzzed params generated by the Foundry fuzzer.
     *      Right now these params include only a uint256 seed, which we could
     *      potentially use to generate other random data.
     */
    FuzzParams fuzzParams;
    /**
     * @dev An array of function selectors for "checks". The MOATEngine will
     *      call these functions after calling exec to make assertions about
     *      the resulting test state.
     */
    bytes4[] checks;
}

/**
 * @notice Stateless helpers for MOATEngine.
 */
library MOATEngineLib {
    using OrderComponentsLib for OrderComponents;
    using OrderParametersLib for OrderParameters;
    using OrderLib for Order;
    using AdvancedOrderLib for AdvancedOrder;
    using MOATHelpers for MOATOrder;
    using MOATHelpers for MOATOrder[];

    /**
     * @dev Select an available "action," i.e. "which Seaport function to call,"
     *      based on the orders in a given TestContext. Selects a random action
     *      using the context's fuzzParams.seed when multiple actions are
     *      available for the given order config.
     *
     * @param context A MOAT test context.
     * @return bytes4 selector of a SeaportInterface function.
     */
    function action(TestContext memory context) internal pure returns (bytes4) {
        bytes4[] memory _actions = actions(context);
        return _actions[context.fuzzParams.seed % _actions.length];
    }

    /**
     * @dev Get an array of all possible "actions," i.e. "which Seaport
     *      functions can we call," based on the orders in a given TestContext.
     *
     * @param context A MOAT test context.
     * @return bytes4[] of SeaportInterface function selectors.
     */
    function actions(
        TestContext memory context
    ) internal pure returns (bytes4[] memory) {
        Family family = context.orders.getFamily();

        if (family == Family.SINGLE) {
            MOATOrder memory order = context.orders[0];
            Structure structure = order.getStructure();
            if (structure == Structure.STANDARD) {
                bytes4[] memory selectors = new bytes4[](2);
                selectors[0] = context.seaport.fulfillOrder.selector;
                selectors[1] = context.seaport.fulfillAdvancedOrder.selector;
                return selectors;
            }
            if (structure == Structure.ADVANCED) {
                bytes4[] memory selectors = new bytes4[](1);
                selectors[0] = context.seaport.fulfillAdvancedOrder.selector;
                return selectors;
            }
        }

        if (family == Family.COMBINED) {
            bytes4[] memory selectors = new bytes4[](6);
            selectors[0] = context.seaport.fulfillAvailableOrders.selector;
            selectors[1] = context
                .seaport
                .fulfillAvailableAdvancedOrders
                .selector;
            selectors[2] = context.seaport.matchOrders.selector;
            selectors[3] = context.seaport.matchAdvancedOrders.selector;
            selectors[4] = context.seaport.cancel.selector;
            selectors[5] = context.seaport.validate.selector;
            return selectors;
        }
        revert("MOATEngine: Actions not found");
    }
}

/**
 * @notice Base test contract for MOATEngine. MOAT tests should inherit this.
 *         Includes the setup and helper functions from BaseOrderTest.
 *
 *         Engine lifecycle:
 *           - generate a TestContext. This struct includes:
 *           - exec(context)
 *           - checkAll(context)
 */
contract MOATEngine is BaseOrderTest {
    using OrderComponentsLib for OrderComponents;
    using OrderParametersLib for OrderParameters;
    using OrderLib for Order;
    using AdvancedOrderLib for AdvancedOrder;
    using MOATHelpers for MOATOrder;
    using MOATHelpers for MOATOrder[];
    using MOATEngineLib for TestContext;

    /**
     * @dev Call an available Seaport function based on the orders in the given
     *      TestContext. MOATEngine will deduce which actions are available
     *      for the given orders and call a Seaport function at random using the
     *      context's fuzzParams.seed.
     *
     *      If a caller address is provided in the context, exec will prank the
     *      address before executing the selected action.
     *
     *      Note: not all Seaport actions are implemented here yet.
     *
     * @param context A MOAT test context.
     */
    function exec(TestContext memory context) internal {
        if (context.caller != address(0)) vm.startPrank(context.caller);
        bytes4 _action = context.action();
        if (_action == context.seaport.fulfillOrder.selector) {
            MOATOrder memory moatOrder = context.orders[0];
            AdvancedOrder memory order = moatOrder.order;
            MOATOrderContext memory orderContext = moatOrder.context;

            context.seaport.fulfillOrder(
                order.toOrder(),
                orderContext.fulfillerConduitKey
            );
        } else if (_action == context.seaport.fulfillAdvancedOrder.selector) {
            MOATOrder memory moatOrder = context.orders[0];
            AdvancedOrder memory order = moatOrder.order;
            MOATOrderContext memory orderContext = moatOrder.context;

            context.seaport.fulfillAdvancedOrder(
                order,
                orderContext.criteriaResolvers,
                orderContext.fulfillerConduitKey,
                orderContext.recipient
            );
        } else if (_action == context.seaport.cancel.selector) {
            MOATOrder[] memory moatOrders = context.orders;
            OrderComponents[] memory orderComponents = new OrderComponents[](
                moatOrders.length
            );

            for (uint256 i; i < moatOrders.length; ++i) {
                MOATOrder memory moatOrder = context.orders[i];
                orderComponents[i] = moatOrder
                    .order
                    .toOrder()
                    .parameters
                    .toOrderComponents(moatOrder.context.counter);
            }

            context.seaport.cancel(orderComponents);
        } else if (_action == context.seaport.validate.selector) {
            MOATOrder[] memory moatOrders = context.orders;
            Order[] memory orders = new Order[](moatOrders.length);

            for (uint256 i; i < moatOrders.length; ++i) {
                orders[i] = context.orders[i].order.toOrder();
            }

            context.seaport.validate(orders);
        } else {
            revert("MOATEngine: Action not implemented");
        }
        if (context.caller != address(0)) vm.stopPrank();
    }

    /**
     * @dev Perform a "check," i.e. a post-execution assertion we want to
     *      validate. Checks should be public functions that accept a
     *      TestContext as their only argument. Checks have access to the
     *      post-execution TestContext and can use it to make test assertions.
     *
     *      Since we delegatecall ourself, checks must be public functions on
     *      this contract. It's a good idea to prefix them with "check_" as a
     *      naming convention, although it doesn't actually matter.
     *
     *      The idea here is that we can add checks for different scenarios to
     *      the MOATEngine by adding them via abstract contracts.
     *
     * @param context A MOAT test context.
     * @param selector bytes4 selector of the check function to call.
     */
    function check(TestContext memory context, bytes4 selector) internal {
        (bool success, bytes memory result) = address(this).delegatecall(
            abi.encodeWithSelector(selector, context)
        );
        if (!success) {
            if (result.length == 0) revert();
            assembly {
                revert(add(0x20, result), mload(result))
            }
        }
    }

    /**
     * @dev Perform all checks registered in the context.checks array.
     *
     *      We can add checks to the TestContext at any point in the context
     *      lifecycle, to be called after exec in the test lifecycle.
     *
     *      This is not set up yet, but the idea here is that we can add checks
     *      at order generation time, based on the characteristics of the orders
     *      we generate.
     *
     * @param context A MOAT test context.
     */
    function checkAll(TestContext memory context) internal {
        for (uint256 i; i < context.checks.length; ++i) {
            bytes4 selector = context.checks[i];
            check(context, selector);
        }
    }
}
